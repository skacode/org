name: CI/CD - Dockerized Security Pipeline

on:
  workflow_call:
    inputs:
      project_name:
        description: "Nombre del proyecto"
        required: true
        type: string
      docker_image:
        description: "Nombre de la imagen Docker"
        required: true
        type: string
      working_directory:
        description: "Directorio del proyecto"
        required: true
        type: string

jobs:
  build:
    runs-on: self-hosted  
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Crear red de Docker para herramientas de seguridad
        run: |
          docker network create security-net || true

      - name: Detener y eliminar contenedor Dependency-Track existente
        run: |
          docker rm -f dependency-track-api || true

      - name: Iniciar Dependency-Track Server
        run: |
          docker run -d --network=security-net \
            -p 8081:8080 --name dependency-track-api \
            dependencytrack/apiserver
        timeout-minutes: 3

      - name: Esperar a que Dependency-Track esté operativo
        run: |
          until curl -s http://localhost:8081/api/version; do
            echo "Esperando a que Dependency-Track esté listo..."
            sleep 5
          done
          echo "Dependency-Track listo."

      - name: Analizar dependencias con Dependency-Track (SCA)
        run: |
          docker run --rm --network=security-net \
            -v ${{ github.workspace }}/${{ inputs.working_directory }}:/workspace \
            dependencytrack/cli \
            --url http://localhost:8081 \
            --api-key ${{ secrets.DT_API_KEY }} \
            --upload \
            --project "${{ inputs.project_name }}" \
            --bom /workspace/bom.json


      - name: Subir reporte de Dependency-Track a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=Dependency Track Finding Packaging Format (FPF)" \
            -F "file=@${{ github.workspace }}/${{ inputs.working_directory }}/bom.json" \
            -F "engagement=1"

      - name: Escanear código con SpotBugs + FindSecBugs (SAST)
        run: |
          docker run --rm --network=security-net \
            -v ${{ github.workspace }}/${{ inputs.working_directory }}:/workspace \
            ghcr.io/spotbugs/spotbugs \
            -textui -effort:max -xml:withMessages \
            -output /workspace/spotbugsXml.xml \
            /workspace/target/classes

      - name: Subir reporte de SpotBugs a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=SpotBugs Scan" \
            -F "file=@${{ github.workspace }}/${{ inputs.working_directory }}/spotbugsXml.xml" \
            -F "engagement=1"

      - name: Construir la aplicación con Maven
        run: mvn clean install -DskipTests
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}

      - name: Construir la imagen Docker
        run: |
          docker build -t ${{ inputs.docker_image }} .
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}

      - name: Escanear la imagen con Trivy
        run: |
          docker run --rm --network=security-net \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasec/trivy image \
            --exit-code 0 --severity CRITICAL,HIGH \
            --format json -o /workspace/trivy-report.json \
            ${{ inputs.docker_image }}

      - name: Subir reporte de Trivy a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=Trivy Scan" \
            -F "file=@${{ github.workspace }}/trivy-report.json" \
            -F "engagement=1"

      - name: Iniciar sesión en DockerHub
        if: success()
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Subir imagen de la aplicación a DockerHub
        if: success()
        run: docker push ${{ inputs.docker_image }}

  deploy:
    needs: build
    runs-on: self-hosted  
    if: success()
    steps:
      - name: Verificar si la aplicación ya está en ejecución y eliminarla
        run: |
          docker rm -f ${{ inputs.project_name }} || true

      - name: Hacer pull de la imagen actualizada de la aplicación
        run: docker pull ${{ inputs.docker_image }}

      - name: Reiniciar la aplicación con la nueva imagen en la red
        run: |
          docker network create app-net || true
          docker run -d --network=app-net -p 8080:8080 --name ${{ inputs.project_name }} ${{ inputs.docker_image }}

      - name: Ejecutar escaneo rápido con OWASP ZAP
        run: |
          docker run --rm -v $(pwd):/zap/work:rw --network=app-net \
            -t zaproxy/zap-stable zap.sh \
            -cmd -quickurl http://localhost:8080 \
            -quickout /zap/work/zap-report.json \
            -quickprogress -config scanner.maxScanDurationInMins=5

      - name: Subir reporte de OWASP ZAP a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap-report.json" \
            -F "engagement=1"
