name: CI/CD - Security Pipeline with SpotBugs, Dependency Track, Trivy and ZAP

on:
  workflow_call:
    inputs:
      project_name:
        description: "Nombre del proyecto"
        required: true
        type: string
      docker_image:
        description: "Nombre de la imagen Docker"
        required: true
        type: string
      working_directory:
        description: "Directorio del proyecto"
        required: true
        type: string
      app_url:
        description: "URL de la aplicación"
        required: true
        type: string

jobs:
  setupDefectDojo:
    runs-on: self-hosted
    outputs:
      product_id: ${{ steps.setup.outputs.product_id }}
      engagement_id: ${{ steps.setup.outputs.engagement_id }}
    steps:
      - name: Checkout repositorio org
        uses: actions/checkout@v3
        with:
          repository: skacode/org
          ref: main
          path: org

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Instalar dependencias
        run: pip install requests

      - name: Ejecutar script de DefectDojo desde el repo org
        id: setup
        run: python org/.github/scripts/setupdefectdojo.py
        env:
          INPUT_PROJECT_NAME: ${{ inputs.project_name }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          API_URL: "http://localhost:9090/api/v2"

  scanDependencyTrack:
    needs: setupDefectDojo
    runs-on: self-hosted  
    steps:
      - name: Checkout repositorio org
        uses: actions/checkout@v3
        with:
          repository: skacode/org
          ref: main
          path: org
          
      - name: Verificar si Dependency-Track API está corriendo
        id: check_dependency_track
        run: |
          if [ "$(docker ps -q -f name=dt-apiserver-1)" ]; then
            echo "running=true" >> $GITHUB_ENV
          else
            echo "running=false" >> $GITHUB_ENV
          fi
          
      - name: Iniciar Dependency-Track si está detenido o crear si no existe
        if: env.running == 'false'
        run: |
          if [ "$(docker ps -aq -f name=dt-apiserver-1)" ]; then
            docker start dt-apiserver-1
          else
            docker run -d \
              -p 8081:8080 --name dt-apiserver-1 \
              dependencytrack/apiserver
          fi
 
      - name: Esperar a que Dependency-Track esté operativo
        run: |
          until curl -s http://localhost:8081/api/version; do
            echo "Esperando a que Dependency-Track esté listo..."
            sleep 5
          done
          echo "Dependency-Track listo."

      - name: Generar SBOM con CycloneDX (Maven)
        run: |
          mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
        
      - name: Mover SBOM generado
        run: |
          mv ${{ github.workspace }}/${{ inputs.working_directory }}/target/bom.json ${{ github.workspace }}/${{ inputs.working_directory }}/bom.json
          
      - name: Subir SBOM a Dependency-Track con curl
        run: |
           dtrack-cli bom upload \
              --server http://localhost:8081 \
              --api-key "${{ secrets.DT_API_KEY }}" \
              --project-name "${{ inputs.project_name }}" \
              --project-version "1.0" \
              --bom-path "bom.json"
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}

      - name: Guardar hallazgos de Dependency-Track en JSON
        run: |
          curl -X GET "http://localhost:8081/api/v1/finding?project=${{ inputs.project_name }}" \
            -H "X-API-Key: ${{ secrets.DT_API_KEY }}" \
            -o ${{ github.workspace }}/dependency-track-findings.json
          
      - name: Transformar el JSON al formato correcto para DefectDojo
        run: |
          cat ${{ github.workspace }}/dependency-track-findings.json | jq '{ "findings": . }' \
          > ${{ github.workspace }}/dependency-track-findings-fixed.json

      - name: Set up Python 
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        
      - name: Upload Dependency Track Report to DefectDojo
        if: success()
        run: |
          python org/.github/scripts/uploadtodojo.py \
            --scan_type "Dependency Track Finding Packaging Format (FPF) Export" \
            --file_path "${{ github.workspace }}/dependency-track-findings-fixed.json" \
            --engagement_id "${{ needs.SetupDefectDojo.outputs.engagement_id }}" \
            --product_id "${{ needs.SetupDefectDojo.outputs.product_id }}"
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}

  scanSpotbugs:
    needs: setupDefectDojo
    runs-on: self-hosted  
    steps:   
      - name: Construir la aplicación con Maven
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 
          mvn clean install -U -DskipTests
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
 
      - name: Construir la imagen Docker
        run: |
          docker build -t ${{ inputs.docker_image }} .
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
        
      - name: Escanear código con SpotBugs + FindSecBugs (SAST)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/${{ inputs.working_directory }}:/workspace \
            nemooudeis/spotbugs sh -c "mkdir -p /workspace && spotbugs -textui -effort:max -xml:withMessages -output /workspace/spotbugsXml.xml /workspace/target/classes"

      - name: Set up Python 
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        
      - name: Upload SpotBugs Report to DefectDojo
        if: success()
        run: |
          python org/.github/scripts/uploadtodojo.py \
            --scan_type "SpotBugs Scan" \
            --file_path "${{ github.workspace }}/${{ inputs.working_directory }}/spotbugsXml.xml" \
            --engagement_id "${{ needs.SetupDefectDojo.outputs.product_id }}" \
            --product_id "${{ needs.SetupDefectDojo.outputs.engagement_id }}"
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          
  scanTrivy:
    needs: [setupDefectDojo,scanSpotbugs]
    runs-on: self-hosted  
    steps:      
     - name: Iniciar Escaneo Trivy
       run: |
         CONTAINER_NAME=trivy_scanner${{ inputs.project_name }}
         if docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME"; then
            echo "El contenedor ya existe, iniciándolo..."
            docker start $CONTAINER_NAME
         else
            echo "El contenedor no existe, ejecutándolo..."
            docker run --name $CONTAINER_NAME \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v ${{ github.workspace }}:/workspace \
              -v $HOME/.cache/trivy:/home/none/.cache/trivy \
              aquasec/trivy image \
              --scanners vuln \
              --exit-code 0 --severity CRITICAL \
              --format json -o /workspace/trivy-report.json \
              ${{ inputs.docker_image }}
         fi

     - name: Checkout repository
       uses: actions/checkout@v3

     - name: Set up Python 
       if: always()
       uses: actions/setup-python@v4
       with:
          python-version: '3.x'
          
     - name: Upload Trivy Report to DefectDojo
       if: always()
       run: |
          python org/.github/scripts/uploadtodojo.py \
            --scan_type "Trivy Scan" \
            --file_path "${{ github.workspace }}/trivy-report.json" \
            --engagement_id "${{ needs.SetupDefectDojo.outputs.engagement_id }}" \
            --product_id "${{ needs.SetupDefectDojo.outputs.product_id }}"
       env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}

  solveInjection:
    needs: [scanTrivy, scanDependencyTrack, scanSpotbugs]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Solventar SQL Injection reemplazando por consulta parametrizada
        run: |
          sed -i 's|entityManager.createQuery("SELECT u FROM User u WHERE u.login = '\''" + login + "'\''")|entityManager.createQuery("SELECT u FROM User u WHERE u.login = :login").setParameter("login", login)|' src/main/java/com/appsecco/dvja/services/UserService.java

      - name: Realizar los cambios localmente para poder comparar el parche
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add src/main/java/com/appsecco/dvja/services/UserService.java
          git commit -m "Fix SQL Injection vulnerability: Use parameterized query in UserService.java"
        
  push:
    needs: [solveInjection]
    if: success()
    outputs: 
      IMAGE_NAME: ${{ steps.build_fixed.outputs.IMAGE_NAME }}
    runs-on: self-hosted
    steps:
    - name: Construir imagen corregida
      id: build_fixed
      run: |
            IMAGE_NAME="${{ inputs.docker_image }}:build-${{ github.run_number }}"
            docker build --no-cache -t $IMAGE_NAME .
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Iniciar sesión en DockerHub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
    - name: Etiquetar y subir imagen a DockerHub
      run: |
         docker push ${{ steps.build_fixed.outputs.new_image }}
              
  deploy:
    needs: [push]
    runs-on: self-hosted  
    steps:        
      - name: Verificar si la aplicación ya está en ejecución y eliminarla
        run: |
          docker rm -f ${{ inputs.project_name }} || true
 
      - name: Hacer pull de la imagen actualizada de la aplicación
        run: docker pull ${{ needs.push.outputs.IMAGE_NAME }}

      - name: Borrar caché de imagen docker
        run: docker image prune -af
 
      - name: Iniciar archivo Docker Compose con la nueva imagen
        env:
          NAME_IMAGE: ${{ needs.push.outputs.IMAGE_NAME }}
        run: |
          docker compose up -d --force-recreate

      - name: Limitar recursos de los contenedores en ejecución
        run: |
          for container in $(docker ps --format "{{.Names}}" --filter "name=${{ inputs.project_name }}"); do
            docker update --memory=512m --memory-swap=1g --cpus=0.5 "$container"
          done

  scanZap:
    needs: [deploy,setupDefectDojo]
    runs-on: self-hosted  
    if: success()
    steps:
      - name: Ejecutar escaneo rápido con OWASP ZAP
        run: |
          docker run --rm -v $(pwd):/zap/work:rw --network=host \
            --memory=1g --cpus=1 \
            -t zaproxy/zap-stable zap.sh \
            -cmd -quickurl ${{ inputs.app_url }} \
            -quickout /zap/work/zap-report.xml \
            -quickprogress \
            -config scanner.maxScanDurationInMins=2 \
            -config failOnError=true \
            -config rules.common.requestDelay=200

      - name: Set up Python 
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        
      - name: Upload OWASP ZAP Report to DefectDojo
        if: success()
        run: |
          python org/.github/scripts/uploadtodojo.py \
            --scan_type "ZAP Scan" \
            --file_path "${{ github.workspace }}/${{ inputs.working_directory }}/zap-report.xml" \
            --engagement_id "${{ needs.SetupDefectDojo.outputs.engagement_id }}" \
            --product_id "${{ needs.SetupDefectDojo.outputs.product_id }}"
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
