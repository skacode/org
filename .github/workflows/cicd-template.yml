name: CI/CD - Dockerized Security Pipeline

on:
  workflow_call:
    inputs:
      project_name:
        description: "Nombre del proyecto"
        required: false
        type: string
        default: "default-project"
      docker_image:
        description: "Nombre de la imagen Docker"
        required: false
        type: string
        default: "default-image:latest"
      working_directory:
        description: "Directorio del proyecto"
        required: false
        type: string
        default: "."

jobs:
  build:
    runs-on: self-hosted  
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Crear red de Docker para herramientas de seguridad
        run: |
          docker network create security-net || true

      - name: Verificar si Dependency-Track API está corriendo
        id: check_dependency_track
        run: |
          if [ "$(docker ps -q -f name=dependency-track-api)" ]; then
            echo "running=true" >> $GITHUB_ENV
          else
            echo "running=false" >> $GITHUB_ENV
          fi

      - name: Iniciar Dependency-Track Server si no está corriendo
        if: env.running == 'false'
        run: |
          docker run -d --network=security-net \
            -p 8081:8080 --name dependency-track-api \
            dependencytrack/apiserver
        timeout-minutes: 3

      - name: Esperar a que Dependency-Track esté operativo
        run: |
          until curl -s http://localhost:8081/api/version; do
            echo "Esperando a que Dependency-Track esté listo..."
            sleep 5
          done
          echo "Dependency-Track listo."

      - name: Generar SBOM con CycloneDX (Maven)
        run: |
          mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
      
      - name: Mover SBOM generado
        run: |
          mv ${{ github.workspace }}/${{ inputs.working_directory }}/target/bom.json ${{ github.workspace }}/bom.json

      - name: Subir SBOM a Dependency-Track con dtrack CLI
        run: |
          dtrack-cli bom upload \
            --server http://localhost:8081 \
            --api-key "${{ secrets.DT_API_KEY }}" \
            --project-name "${{ inputs.project_name }}" \
            --project-version "1.0" \
            --bom-path "bom.json"
      
      - name: Guardar hallazgos de Dependency-Track en JSON
        run: |
          curl -X GET "http://localhost:8081/api/v1/finding?project=${{ secrets.VULNADO_UUID }}" \
            -H "X-API-Key: ${{ secrets.DT_API_KEY }}" \
            -o ${{ github.workspace }}/dependency-track-findings.json
            
      - name: Transformar el JSON al formato correcto para DefectDojo
        run: |
          cat ${{ github.workspace }}/dependency-track-findings.json | jq '{ "findings": . }' \
            > ${{ github.workspace }}/dependency-track-findings-fixed.json

      - name: Subir reporte de Dependency-Track a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:8080/api/v2/reimport-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=Dependency Track Finding Packaging Format (FPF) Export" \
            -F "file=@${{ github.workspace }}/dependency-track-findings-fixed.json" \
            -F "engagement=1" \
            -F "product_name=${{ inputs.project_name }}"

      - name: Construir la aplicación con Maven
        run: mvn clean install -DskipTests
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}

      - name: Construir la imagen Docker
        run: |
          docker build -t ${{ inputs.docker_image }} .
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}

      - name: Subir imagen de la aplicación a DockerHub
        if: success()
        run: docker push ${{ inputs.docker_image }}

  deploy:
    needs: build
    runs-on: self-hosted  
    if: success()
    steps:
      - name: Verificar si la aplicación ya está en ejecución y eliminarla
        run: |
          docker rm -f ${{ inputs.project_name }} || true

      - name: Hacer pull de la imagen actualizada de la aplicación
        run: docker pull ${{ inputs.docker_image }}

      - name: Iniciar base de datos PostgreSQL para el proyecto
        run: |
          docker run -d --network=secure-net --name ${PROJECT_NAME}-db \
            -e POSTGRES_USER=${PROJECT_NAME} \
            -e POSTGRES_PASSWORD=${PROJECT_NAME} \
            -e POSTGRES_DB=${PROJECT_NAME} \
            postgres:latest

      - name: Reiniciar la aplicación con la nueva imagen en la red
        run: |
          docker run -d --network=secure-net -p 8084:8080 --name ${{ inputs.project_name }} \
            -e DATABASE_URL="jdbc:postgresql://${{ inputs.project_name }}-db:5432/${{ inputs.project_name }}" \
            -e DATABASE_USER="${{ inputs.project_name }}" \
            -e DATABASE_PASSWORD="${{ inputs.project_name }}" \
            ${{ inputs.docker_image }}

      - name: Ejecutar escaneo rápido con OWASP ZAP
        run: |
          docker run --rm -v $(pwd):/zap/work:rw --network=secure-net \
            -t zaproxy/zap-stable zap.sh \
            -cmd -quickurl http://localhost:8084 \
            -quickout /zap/work/zap-report.json \
            -quickprogress -config scanner.maxScanDurationInMins=5

      - name: Subir reporte de OWASP ZAP a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:8080/api/v2/reimport-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap-report.json" \
            -F "engagement=1" \
            -F "product_name=${{ inputs.project_name }}"
