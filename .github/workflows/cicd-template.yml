name: CI/CD - Security Pipeline with SpotBugs, Dependency Track, Trivy and ZAP.
 
on:
  workflow_call:
    inputs:
      project_name:
        description: "Nombre del proyecto"
        required: true
        type: string
      docker_image:
        description: "Nombre de la imagen Docker"
        required: true
        type: string
      working_directory:
        description: "Directorio del proyecto"
        required: true
        type: string
      app_url:
        description: "Url de la aplicación"
        required: True
        type: string
 
jobs:
  build:
    runs-on: self-hosted  
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
 
      - name: Crear red de Docker para herramientas de seguridad
        run: |
          docker network create security-net || true
      - name: Verificar si Dependency-Track API está corriendo
        id: check_dependency_track
        run: |
          if [ "$(docker ps -q -f name=dependency-track-api)" ]; then
            echo "running=true" >> $GITHUB_ENV
          else
            echo "running=false" >> $GITHUB_ENV
          fi
      - name: Iniciar Dependency-Track si está detenido o crear si no existe
        if: env.running == 'false'
        run: |
          if [ "$(docker ps -aq -f name=dependency-track-api)" ]; then
            docker start dependency-track-api
          else
            docker run -d --network=security-net \
              -p 8081:8080 --name dependency-track-api \
              dependencytrack/apiserver
          fi
 
      - name: Esperar a que Dependency-Track esté operativo
        run: |
          until curl -s http://localhost:8081/api/version; do
            echo "Esperando a que Dependency-Track esté listo..."
            sleep 5
          done
          echo "Dependency-Track listo."
 
      - name: Generar SBOM con CycloneDX (Maven)
        run: |
          mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
      - name: Mover SBOM generado
        run: |
          mv ${{ github.workspace }}/${{ inputs.working_directory }}/target/bom.json ${{ github.workspace }}/${{ inputs.working_directory }}/bom.json
 
      - name: Subir SBOM a Dependency-Track con dtrack CLI
        run: |
         dtrack-cli bom upload \
            --server http://localhost:8081 \
            --api-key "${{ secrets.DT_API_KEY }}" \
            --project-name "${{ inputs.project_name }}" \
            --project-version "1.0" \
            --bom-path "bom.json"
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
      - name: Guardar hallazgos de Dependency-Track en JSON
        run: |
          curl -X GET "http://localhost:8081/api/v1/finding?project=${{ inputs.project_name }}" \
            -H "X-API-Key: ${{ secrets.DT_API_KEY }}" \
            -o ${{ github.workspace }}/dependency-track-findings.json
      - name: Transformar el JSON al formato correcto para DefectDojo
        run: |
          cat ${{ github.workspace }}/dependency-track-findings.json | jq '{ "findings": . }' \
> ${{ github.workspace }}/dependency-track-findings-fixed.json
 
      - name: Subir reporte de Dependency-Track a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:9090/api/v2/reimport-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=Dependency Track Finding Packaging Format (FPF) Export" \
            -F "file=@${{ github.workspace }}/dependency-track-findings-fixed.json" \
            -F "engagement=1"
 
      - name: Construir la aplicación con Maven
        run: mvn clean install -DskipTests
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
 
      - name: Construir la imagen Docker
        run: |
          docker build -t ${{ inputs.docker_image }} .
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}
      - name: Escanear código con SpotBugs + FindSecBugs (SAST)
        run: |
          docker run --rm --network=security-net \
            -v ${{ github.workspace }}/${{ inputs.working_directory }}:/workspace \
            nemooudeis/spotbugs sh -c "mkdir -p /workspace && spotbugs -textui -effort:max -xml:withMessages -output /workspace/spotbugsXml.xml /workspace/target/classes"
 
      - name: Subir reporte de SpotBugs a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:9090/api/v2/reimport-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=SpotBugs Scan" \
            -F "file=@${{ github.workspace }}/${{ inputs.working_directory }}/spotbugsXml.xml" \
            -F "engagement=1"
 
            
 
      - name: Iniciar sesión en DockerHub
        if: success()
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
 
      - name: Subir imagen de la aplicación a DockerHub
        if: success()
        run: docker push ${{ inputs.docker_image }}
 
  deploy:
    needs: build
    runs-on: self-hosted  
    if: success()
    steps:
      - name: Verificar si la aplicación ya está en ejecución y eliminarla
        run: |
          docker rm -f ${{ inputs.project_name }} || true
 
      - name: Hacer pull de la imagen actualizada de la aplicación
        run: docker pull ${{ inputs.docker_image }}
 
      - name: Iniciar archivo Docker Compose del proyecto
        run: |
          docker compose up -d
 
      - name: Conectar todos los contenedores del proyecto a la red `secure-net`
        run: |
          for container in $(docker ps --format "{{.Names}}" --filter "name=${{ inputs.project_name }}"); do
            docker network connect secure-net "$container" || true
          done
      - name: Limitar recursos de los contenedores en ejecución
        run: |
          for container in $(docker ps --format "{{.Names}}" --filter "name=${{ inputs.project_name }}"); do
            docker update --memory=512m --memory-swap=1g --cpus=0.5 "$container"
          done
 
      - name: Ejecutar escaneo rápido con OWASP ZAP
        run: |
          docker run --rm -v $(pwd):/zap/work:rw --network=secure-net \
            --memory=1g --cpus=1 \
            -t zaproxy/zap-stable zap.sh \
            -cmd -quickurl ${{ inputs.app_url }} \
            -quickout /zap/work/zap-report.json \
            -quickprogress \
            -config scanner.maxScanDurationInMins=2 \
            -config failOnError=true \
            -config rules.common.requestDelay=200
 
      - name: Subir reporte de OWASP ZAP a DefectDojo
        if: always()
        run: |
          curl -X POST "http://localhost:9090/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap-report.json" \
            -F "engagement=1"
